import streamlit as st
import api_client # –ù–∞—à –º–æ–¥—É–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å FastAPI

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    layout="wide",
    page_title="Talent Navigator AI",
    page_icon="üöÄ"
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ ---
# –≠—Ç–æ "–ø–∞–º—è—Ç—å" –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
    st.session_state.user_info = {}

# =====================================================================================
# --- –°–¢–†–ê–ù–ò–¶–ê –í–•–û–î–ê ---
# =====================================================================================
def show_login_page():
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É."""
    with st.container():
        st.title("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Talent Navigator AI!")
        st.caption("–í–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏ –∏ –ø–æ–∏—Å–∫–µ —Ç–∞–ª–∞–Ω—Ç–æ–≤.")
        
        with st.form("login_form"):
            username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            
            submitted = st.form_submit_button("–í–æ–π—Ç–∏", use_container_width=True, type="primary")

            if submitted:
                with st.spinner("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è..."):
                    user_data = api_client.login(username, password)
                    if user_data and user_data.get("success"):
                        st.session_state.logged_in = True
                        st.session_state.user_info = user_data
                        st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ api_client

# =====================================================================================
# --- –°–¢–†–ê–ù–ò–¶–ê –†–ê–ë–û–¢–ù–ò–ö–ê ---
# =====================================================================================
def show_employee_page():
    st.title(f"üëã –ü—Ä–∏–≤–µ—Ç, {st.session_state.user_info.get('name')}!")
    st.caption("–≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å, —Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–æ–ª—è—Ö.")
    st.markdown("---")

    tab_profile, tab_plan, tab_offers = st.tabs(["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üó∫Ô∏è –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø–ª–∞–Ω", "üì¨ –û—Ñ—Ñ–µ—Ä—ã"])

    with tab_profile:
        user_id = st.session_state.user_info.get('user_id')
        
        @st.cache_data(ttl=5) 
        def get_profile_data(uid):
            profile = api_client.get_user_profile(uid)
            gamification = api_client.get_user_progress(uid)
            return profile, gamification
        
        if "edit_mode" not in st.session_state:
            st.session_state.edit_mode = False

        # --- –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
        # –ï—Å–ª–∏ –º—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        if not st.session_state.edit_mode:
            if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"):
                st.session_state.edit_mode = True
                st.rerun()

        # --- –ù–ê–î–ï–ñ–ù–ê–Ø –§–û–†–ú–ê –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø (–±–µ–∑ st.dialog) ---
        # –≠—Ç–∞ —Ñ–æ—Ä–º–∞ –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –ø—Ä—è–º–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –∫–æ–≥–¥–∞ edit_mode == True
        if st.session_state.edit_mode:
            with st.container(border=True):
                st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
                profile_data_to_edit, _ = get_profile_data(user_id)
                
                with st.form("edit_profile_form"):
                    nickname_val = profile_data_to_edit.get("nickname", "")
                    about_val = profile_data_to_edit.get("about", "")
                    skills_list = profile_data_to_edit.get("skills", [])
                    skills_val = ", ".join(skills_list)

                    new_nickname = st.text_input("–ù–∏–∫–Ω–µ–π–º", value=nickname_val)
                    new_about = st.text_area("–û–±–æ –º–Ω–µ", value=about_val, height=150)
                    new_skills_str = st.text_input("–ù–∞–≤—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", value=skills_val)

                    col1, col2 = st.columns([1,1])
                    with col1:
                        if st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True, type="primary"):
                            new_skills_list = [skill.strip() for skill in new_skills_str.split(",") if skill.strip()]
                            
                            with st.spinner("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..."):
                                api_client.update_user_profile(user_id, new_nickname, new_about, new_skills_list)
                            
                            st.toast("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                            st.session_state.edit_mode = False
                            st.rerun()
                    with col2:
                        if st.form_submit_button("–û—Ç–º–µ–Ω–∞", use_container_width=True):
                            st.session_state.edit_mode = False
                            st.rerun()

        # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (–æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å) ---
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–æ–±–Ω–æ
        profile_data, gamification_data = get_profile_data(user_id)

        if not profile_data or not gamification_data:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.")
        else:
            col1, col2 = st.columns([1, 4])
            with col1:
                st.image(profile_data.get("photo_url", ""), use_container_width=True, caption=profile_data.get("nickname"))
            with col2:
                st.header(profile_data.get("name"))
                st.subheader(profile_data.get("position", "–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞"))
                st.markdown(f"**–û–±–æ –º–Ω–µ:** *{profile_data.get('about', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞')}*")
            st.markdown("---")
            st.subheader("–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏")
            skills = profile_data.get("skills", [])
            if skills:
                st.info(" ".join([f"`{skill.upper()}`" for skill in skills]))
            else:
                st.warning("–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞. –ù–∞–∂–º–∏—Ç–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö.")
            
            st.markdown("---")
            st.subheader("–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å")
            g_col1, g_col2 = st.columns(2)
            with g_col1:
                st.metric("‚ú® –û—á–∫–∏ –æ–ø—ã—Ç–∞ (XP)", gamification_data.get('xp', 0))
            with g_col2:
                st.metric("üöÄ –£—Ä–æ–≤–µ–Ω—å", f"Lvl {gamification_data.get('level', 1)}")

            achievements = gamification_data.get('achievements', [])
            if achievements:
                st.write("**–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:** " + " ".join([f"üèÜ `{ach}`" for ach in achievements]))
            
            with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"):
                st.toggle("–°–∫—Ä—ã—Ç—å –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å", value=True)
                st.toggle("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–π —É—Ä–æ–≤–µ–Ω—å", value=True)
                if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", type="secondary"):
                    st.toast("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (—Å–∏–º—É–ª—è—Ü–∏—è)")

    with tab_plan:
        st.header("ü§ñ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")
        st.info("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—à –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–≤—ã–∫–∏ –∏ —Ü–µ–ª–∏, –∏ –ø–æ—Å—Ç—Ä–æ–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–∞–Ω–∏–∏.")

        if st.button("üöÄ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å", type="primary", use_container_width=True):
            user_id = st.session_state.user_info.get('user_id')
            with st.spinner("üß† –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥."):
                plan = api_client.generate_career_plan(user_id)

            if plan:
                st.balloons()
                st.subheader("‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≥–æ—Ç–æ–≤!")
                
                with st.container(border=True):
                    st.markdown("### üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏")
                    st.success(plan.get("current_analysis", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."))
                with st.container(border=True):
                    st.markdown("### üß≠ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥")
                    path = plan.get("recommended_path", {})
                    st.info(f"**–¶–µ–ª–µ–≤–∞—è —Ä–æ–ª—å:** {path.get('target_role', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}\n\n"
                            f"**–ü–æ—á–µ–º—É –æ–Ω–∞ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç:** {path.get('why_it_fits', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.')}")
                with st.container(border=True):
                    st.markdown("### üéØ –ù–∞–≤—ã–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è (Skill Gap)")
                    skill_gap = plan.get("skill_gap", [])
                    if skill_gap:
                        for gap in skill_gap:
                            st.markdown(f"- **`{gap.get('skill')}`** ‚Äî {gap.get('reason')}")
                with st.container(border=True):
                    st.markdown("### üìù –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π")
                    action_steps = plan.get("actionable_steps", [])
                    if action_steps:
                        for step in action_steps:
                            st.markdown(f"**–®–∞–≥ {step.get('step')} ({step.get('type')}):** {step.get('description')}")

    with tab_offers:
        st.header("üì¨ –í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        user_id = st.session_state.user_info.get('user_id')
        offers = api_client.get_user_offers(user_id)

        if offers is None:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ñ—Ñ–µ—Ä—ã.")
        elif not offers:
            st.success("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
        else:
            for offer in offers:
                with st.container(border=True):
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è HR –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    hr_profile = api_client.get_user_profile(offer['from_hr_id'])
                    hr_name = hr_profile.get('name') if hr_profile else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π HR"

                    st.subheader(offer['title'])
                    st.caption(f"–û—Ç: {hr_name}")
                    st.info(f"–°—Ç–∞—Ç—É—Å: {offer['status']}")
                    
                    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"):
                        st.write(offer['description'])

                    # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω
                    if offer['status'] == "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ":
                        c1, c2 = st.columns(2)
                        with c1:
                            if st.button("üëç –ü—Ä–∏–Ω—è—Ç—å", key=f"accept_{offer['id']}", use_container_width=True):
                                api_client.update_offer_status(offer['id'], "–ü—Ä–∏–Ω—è—Ç–æ")
                                st.toast("–û—Ñ—Ñ–µ—Ä –ø—Ä–∏–Ω—è—Ç!")
                                st.rerun()
                        with c2:
                            if st.button("üëé –û—Ç–∫–ª–æ–Ω–∏—Ç—å", key=f"decline_{offer['id']}", use_container_width=True):
                                api_client.update_offer_status(offer['id'], "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                                st.toast("–û—Ñ—Ñ–µ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
                                st.rerun()

# =====================================================================================
# --- –°–¢–†–ê–ù–ò–¶–ê HR ---
# =====================================================================================
def show_hr_page():
    st.title(f"üìá –ü–∞–Ω–µ–ª—å HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, {st.session_state.user_info.get('name')}")
    st.caption("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–º–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –æ–ø—ã—Ç–∞ –∏ –Ω–∞–≤—ã–∫–æ–≤.")
    st.markdown("---")

    tab_search, tab_my_offers = st.tabs(["üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", "üìÑ –ú–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã"])

    with tab_search:
        st.header("üß† –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        st.info("–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–ª–∏ —Ä–æ–ª—å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ù—É–∂–µ–Ω –æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ Python —Å–æ –∑–Ω–∞–Ω–∏–µ–º –æ–±–ª–∞—á–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞'. –ò–ò –Ω–∞–π–¥–µ—Ç —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        with st.form("search_form"):
            search_prompt = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:", height=150)
            submitted = st.form_submit_button("–ù–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", type="primary", use_container_width=True)
            if submitted and search_prompt:
                with st.spinner("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤..."):
                    results = api_client.match_candidates(search_prompt)
                st.subheader("üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
                if not results:
                    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
                else:
                    sorted_results = sorted(results, key=lambda x: x['score'], reverse=True)
                    for result in sorted_results:
                        with st.container(border=True):
                            col1, col2 = st.columns([3, 1])
                            with col1:
                                st.subheader(result.get("name"))
                                st.caption(f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {result.get('position')}")
                            with col2:
                                match_percent = int(result.get('score', 0) * 100)
                                st.progress(match_percent, text=f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {match_percent}%")
                            c1, c2 = st.columns(2)
                            with c1:
                                if st.button("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", key=f"view_{result.get('user_id')}", use_container_width=True):
                                    st.toast(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è {result.get('name')} (—Å–∏–º—É–ª—è—Ü–∏—è)")
                            with c2:
                                if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ñ—Ñ–µ—Ä", key=f"offer_{result.get('user_id')}", use_container_width=True, type="secondary"):
                                    st.toast(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞ {result.get('name')} (—Å–∏–º—É–ª—è—Ü–∏—è)")
            elif submitted:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.")

    with tab_my_offers:
        st.header("üìÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤")
        hr_id = st.session_state.user_info.get('user_id')
        sent_offers = api_client.get_hr_offers(hr_id)

        if sent_offers is None:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã.")
        elif not sent_offers:
            st.info("–í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞.")
        else:
            # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            display_data = []
            for offer in sent_offers:
                user_profile = api_client.get_user_profile(offer['to_user_id'])
                user_name = user_profile.get('name') if user_profile else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
                display_data.append({
                    "candidate_name": user_name,
                    "vacancy": offer['title'],
                    "sent_at": offer.get('timestamp', '').strip('"'),
                    "status": offer['status']
                })

            st.data_editor(
                display_data,
                column_config={
                    "candidate_name": "–ö–∞–Ω–¥–∏–¥–∞—Ç", "vacancy": "–í–∞–∫–∞–Ω—Å–∏—è", 
                    "sent_at": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "status": "–°—Ç–∞—Ç—É—Å"
                },
                hide_index=True, use_container_width=True, disabled=True
            )

# =====================================================================================
# --- –°–¢–†–ê–ù–ò–¶–ê –ê–î–ú–ò–ù–ê ---
# =====================================================================================
def show_admin_page():
    st.title("üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    with st.expander("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", expanded=False):
        with st.form("create_user_form", clear_on_submit=False): # clear_on_submit=False, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å
            st.subheader("–î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            new_name = st.text_input("–§–ò–û")
            new_username = st.text_input("–õ–æ–≥–∏–Ω (username)")
            new_role = st.selectbox("–†–æ–ª—å", ["–†–∞–±–æ—Ç–Ω–∏–∫", "HR"], index=0)
            
            submitted = st.form_submit_button("‚úÖ –°–æ–∑–¥–∞—Ç—å –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å")

            if submitted:
                if all([new_name, new_role, new_username]):
                    with st.spinner(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_name}..."):
                        # –í—ã–∑—ã–≤–∞–µ–º api_client –±–µ–∑ –ø–∞—Ä–æ–ª—è
                        response = api_client.create_user(
                            name=new_name, 
                            role=new_role, 
                            username=new_username,
                            password=None # –ü–µ—Ä–µ–¥–∞–µ–º None, —á—Ç–æ–±—ã –±—ç–∫–µ–Ω–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –ø–∞—Ä–æ–ª—å
                        )
                        if response:
                            st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{response.get('name')}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
                            st.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: **{response.get('generated_password')}**")
                            st.warning("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å —Å–µ–π—á–∞—Å. –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –æ–Ω –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.")
                else:
                    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –§–ò–û, –õ–æ–≥–∏–Ω –∏ –†–æ–ª—å.")
    st.markdown("---")
    st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    all_users = api_client.get_all_users()
    if not all_users:
        st.info("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        for user in all_users: user['delete'] = False
        edited_users_df = st.data_editor(all_users, column_config={"id": "ID", "name": "–§–ò–û", "role": "–†–æ–ª—å", "position": "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "delete": st.column_config.CheckboxColumn("–£–¥–∞–ª–∏—Ç—å?", help="–û—Ç–º–µ—Ç—å—Ç–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")}, hide_index=True, key="user_editor", use_container_width=True)
        if st.button("üóëÔ∏è –ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö", type="primary"):
            users_to_delete = [user for user in edited_users_df if user.get("delete")]
            if users_to_delete:
                progress_bar = st.progress(0, text="–ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ...")
                for i, user in enumerate(users_to_delete):
                    api_client.delete_user(user['id'])
                    st.toast(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['name']} —É–¥–∞–ª–µ–Ω.")
                    progress_bar.progress((i + 1) / len(users_to_delete), text=f"–£–¥–∞–ª–µ–Ω–æ {i+1} –∏–∑ {len(users_to_delete)}")
                st.rerun()
            else:
                st.info("–ù–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –æ—Ç–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

# =====================================================================================
# --- –ì–õ–ê–í–ù–´–ô –†–û–£–¢–ï–† –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
# =====================================================================================
if not st.session_state.logged_in:
    show_login_page()
else:
    st.sidebar.header(f"üë§ {st.session_state.user_info.get('name')}")
    st.sidebar.caption(f"–†–æ–ª—å: {st.session_state.user_info.get('role')}")
    if st.sidebar.button("–í—ã–π—Ç–∏", use_container_width=True):
        st.session_state.logged_in = False
        st.session_state.user_info = {}
        st.rerun()

    role = st.session_state.user_info.get("role")
    if role == "–†–∞–±–æ—Ç–Ω–∏–∫":
        show_employee_page()
    elif role == "HR":
        show_hr_page()
    elif role == "Admin":
        show_admin_page()
    else:
        st.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")