import os
import streamlit as st
import api_client
import time
from typing import Dict

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    layout="wide",
    page_title="Talent Navigator AI",
    page_icon="üöÄ"
)

HIDE_DEFAULT_FORMAT = """
<style>
header [data-testid="stToolbar"] {visibility: hidden !important;}
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
</style>
"""

st.markdown(HIDE_DEFAULT_FORMAT, unsafe_allow_html=True)
# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ ---
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
    st.session_state.user_info = {}

# =====================================================================================
# --- –°–¢–†–ê–ù–ò–¶–ê –í–•–û–î–ê ---
# =====================================================================================
def show_login_page():
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É."""
    with st.container():
        st.title("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Talent Navigator AI!")
        st.caption("–í–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏ –∏ –ø–æ–∏—Å–∫–µ —Ç–∞–ª–∞–Ω—Ç–æ–≤.")
        
        with st.form("login_form"):
            username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            
            submitted = st.form_submit_button("–í–æ–π—Ç–∏", use_container_width=True, type="primary")

            if submitted:
                with st.spinner("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è..."):
                    user_data = api_client.login(username, password)
                    if user_data and user_data.get("success"):
                        st.session_state.logged_in = True
                        st.session_state.user_info = user_data
                        st.rerun()

# =====================================================================================
# --- –°–¢–†–ê–ù–ò–¶–ê –†–ê–ë–û–¢–ù–ò–ö–ê ---
# =====================================================================================

def show_employee_page():
    st.title(f"üëã –ü—Ä–∏–≤–µ—Ç, {st.session_state.user_info.get('name')}!")
    st.caption("–≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å, —Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–æ–ª—è—Ö.")

    if "event_response" in st.session_state and st.session_state.event_response:
        response = st.session_state.event_response
        if response.get("unlocked_achievements"):
            for ach in response["unlocked_achievements"]:
                st.toast(f"üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {ach['name']}!", icon="üèÜ")
                st.balloons()

        if response.get("xp_added", 0) > 0:
            st.toast(f"‚ú® +{response['xp_added']} XP!")

        st.session_state.event_response = None
        st.cache_data.clear() 

    st.markdown("---")

    tab_profile, tab_plan, tab_offers = st.tabs([
        "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", 
        "üó∫Ô∏è –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø–ª–∞–Ω", 
        "üì¨ –û—Ñ—Ñ–µ—Ä—ã"
    ])

    user_id = st.session_state.user_info.get('user_id')

    # =====================================================================================
    # --- –í–ö–õ–ê–î–ö–ê 1: –ú–û–ô –ü–†–û–§–ò–õ–¨ ---
    # =====================================================================================
    with tab_profile:
        @st.cache_data(ttl=10) 
        def get_all_profile_data(uid):
            profile = api_client.get_user_profile(uid)
            gamification = api_client.get_user_progress(uid)
            achievements = api_client.get_user_achievements_status(uid)
            return profile, gamification, achievements
        
        profile_data, gamification_data, achievements_data = get_all_profile_data(user_id)
        
        if "edit_mode" not in st.session_state: st.session_state.edit_mode = False
        
        if not st.session_state.edit_mode:
            if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"):
                st.session_state.edit_mode = True
                st.rerun()

        if st.session_state.edit_mode:
            with st.container(border=True):
                st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
                with st.form("edit_profile_form"):
                    name_val = profile_data.get("name", "")
                    nickname_val = profile_data.get("nickname", "")
                    photo_url_val = profile_data.get("photo_url", "")
                    about_val = profile_data.get("about", "")
                    skills_list = profile_data.get("skills", [])
                    skills_val = ", ".join(skills_list)
                    new_name = st.text_input("–í–∞—à–µ –§–ò–û", value=name_val)
                    new_nickname = st.text_input("–ù–∏–∫–Ω–µ–π–º (–ª–æ–≥–∏–Ω)", value=nickname_val)
                    new_photo_url = st.text_input("URL –∞–≤–∞—Ç–∞—Ä–∞", value=photo_url_val)
                    new_about = st.text_area("–û–±–æ –º–Ω–µ", value=about_val, height=150)
                    new_skills_str = st.text_input("–ù–∞–≤—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", value=skills_val)
                    
                    col1, col2 = st.columns([1,1])
                    with col1:
                        if st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True, type="primary"):
                            new_skills_list = [skill.strip() for skill in new_skills_str.split(",") if skill.strip()]
                            old_profile_for_event = {"skills": profile_data.get('skills', [])}
                            new_profile_for_event = {"about": new_about, "skills": new_skills_list, "name": new_name, "photo_url": new_photo_url}
                            
                            with st.spinner("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..."):
                                api_client.update_user_profile(user_id, name=new_name, nickname=new_nickname, about=new_about, photo_url=new_photo_url, skills=new_skills_list)
                                st.session_state.event_response = api_client.trigger_gamification_event(user_id, "PROFILE_UPDATED", {"old_profile": old_profile_for_event, "new_profile": new_profile_for_event})
                            
                            st.session_state.edit_mode = False
                            st.rerun()
                    with col2:
                        if st.form_submit_button("–û—Ç–º–µ–Ω–∞", use_container_width=True):
                            st.session_state.edit_mode = False
                            st.rerun()

        if not profile_data or not gamification_data or not achievements_data:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.")
        else:
            col1, col2 = st.columns([1, 4])
            with col1:
                st.image(profile_data.get("photo_url", ""), use_container_width=True, caption=profile_data.get("nickname"))
            with col2:
                st.header(profile_data.get("name"))
                st.subheader(profile_data.get("position", "–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞"))
                st.markdown(f"**–û–±–æ –º–Ω–µ:** {profile_data.get('about') or '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.'}")
            st.markdown("---")
            st.subheader("–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏")
            skills = profile_data.get("skills", [])
            if skills:
                st.info(" ".join([f"`{skill.upper()}`" for skill in skills]))
            else:
                st.warning("–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞.")
            st.markdown("---")
            st.subheader("–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å")
            g_col1, g_col2 = st.columns(2)
            with g_col1:
                st.metric("‚ú® –û—á–∫–∏ –æ–ø—ã—Ç–∞ (XP)", gamification_data.get('xp', 0))
            with g_col2:
                st.metric("üöÄ –£—Ä–æ–≤–µ–Ω—å", f"Lvl {gamification_data.get('level', 1)}")

            level = gamification_data.get('level', 1)
            xp = gamification_data.get('xp', 0)
            xp_current_level = ((level - 1)**2) * 100
            xp_for_next_level = (level**2) * 100
            xp_needed = xp_for_next_level - xp_current_level
            xp_progress_in_level = xp - xp_current_level
            progress_percent = xp_progress_in_level / xp_needed if xp_needed > 0 else 1.0
            st.progress(progress_percent, text=f"{xp_progress_in_level} / {xp_needed} XP –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è")

            st.markdown("##### –í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã")
            all_ach = achievements_data.get('achievements', [])
            if all_ach:
                num_columns = len(all_ach)
                cols = st.columns(num_columns)
                for i, ach in enumerate(all_ach):
                    with cols[i % num_columns]:
                        icon_url = f"http://localhost:8000/assets/icons/{ach['icon']}"
                        if not ach['unlocked']:
                            icon_url += "?grayscale=true"
                        st.image(icon_url, width=80, caption=f"**{ach['name']}**" if ach['unlocked'] else ach['name'])
            
            with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"):
                st.toggle("–°–∫—Ä—ã—Ç—å –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å", value=True)
                if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", type="secondary"): 
                    st.toast("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (—Å–∏–º—É–ª—è—Ü–∏—è)")

    # =====================================================================================
    # --- –í–ö–õ–ê–î–ö–ê 2: –ö–ê–†–¨–ï–†–ù–´–ô –ü–õ–ê–ù ---
    # =====================================================================================
        with tab_plan:
            st.header("üó∫Ô∏è –í–∞—à–∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–ª–∞–Ω—ã")
            user_id = st.session_state.user_info.get('user_id')

            if 'chat_active' not in st.session_state: st.session_state.chat_active = False
            if 'processing_bot_response' not in st.session_state: st.session_state.processing_bot_response = False
            if "messages" not in st.session_state: st.session_state.messages = []
            if 'generated_plan' not in st.session_state: st.session_state.generated_plan = None

            if not st.session_state.generated_plan:
                with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤..."):
                    saved_plans_data = api_client.get_all_career_plans(user_id)
                if saved_plans_data and saved_plans_data.get("plans"):
                    st.subheader("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã")
                    plans = saved_plans_data["plans"]
                    for i, plan in enumerate(reversed(plans)):
                        title = plan.get('plan_title', f'–ü–ª–∞–Ω {len(plans)-i}')
                        date = plan.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')[:10]
                        with st.expander(f"**{title}** (–æ—Ç {date})"):
                            st.success(f"**–ê–Ω–∞–ª–∏–∑:** {plan.get('current_analysis', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.')}")
                            path = plan.get('recommended_path', {})
                            st.info(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {path.get('target_role', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}. **–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** {path.get('why_it_fits', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.')}")
                            st.markdown("**–ù–∞–≤—ã–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:**")
                            skill_gap = plan.get("skill_gap", [])
                            if skill_gap:
                                for gap in skill_gap: st.markdown(f"- **`{gap.get('skill')}`** ‚Äî {gap.get('reason')}")
                            st.markdown("**–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:**")
                            action_steps = plan.get("actionable_steps", [])
                            if action_steps:
                                for step in action_steps: st.markdown(f"**{step.get('step')}. ({step.get('type')}):** {step.get('description')} ({step.get('timeline')})")
                else:
                    st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞!")
                st.markdown("---")

            if not st.session_state.chat_active and not st.session_state.generated_plan:
                if st.button("üí¨ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥...", use_container_width=True, type="primary"):
                    api_client.clear_chat_history(user_id)
                    st.session_state.event_response = api_client.trigger_gamification_event(user_id, "FIRST_CHAT_MESSAGE")
                    st.session_state.chat_active = True
                    st.rerun()

            elif st.session_state.chat_active:
                st.subheader("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞")
                chat_container = st.container(height=400, border=True)
                if not st.session_state.get("messages"):
                    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ª–æ–≥–∞..."):
                        history_data = api_client.get_chat_history(user_id)
                    if history_data and history_data.get("history"):
                        st.session_state.messages = history_data["history"]
                    else:
                        st.session_state.messages = [{"role": "assistant", "content": "–ü—Ä–∏–≤–µ—Ç! –Ø '–ù–∞–≤–∏–≥–∞—Ç–æ—Ä'. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, –∏ –º—ã –≤–º–µ—Å—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏–º –≤–∞—à –Ω–æ–≤—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø–ª–∞–Ω."}]
                
                for message in st.session_state.messages:
                    with chat_container.chat_message(message["role"]): st.markdown(message["content"])
                
                if st.session_state.processing_bot_response:
                    with chat_container.chat_message("assistant"):
                        placeholder = st.empty()
                        placeholder.markdown("–ü–µ—á–∞—Ç–∞—é...")
                        last_user_message = next((msg["content"] for msg in reversed(st.session_state.messages) if msg["role"] == "user"), None)
                        if last_user_message:
                            response_data = api_client.get_chat_response(user_id, last_user_message)
                            bot_response = response_data.get("response", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.") if response_data else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."
                            placeholder.markdown(bot_response)
                            st.session_state.messages.append({"role": "assistant", "content": bot_response})
                            st.session_state.processing_bot_response = False
                            st.rerun()
                
                if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."):
                    st.session_state.messages.append({"role": "user", "content": prompt})
                    st.session_state.processing_bot_response = True
                    st.rerun()

                col1, col2 = st.columns([3, 1])
                with col1:
                    if len(st.session_state.messages) > 3:
                        if st.button("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω", use_container_width=True):
                            with st.spinner("–°–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä—É—é –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..."):
                                plan_data_response = api_client.generate_final_plan_from_chat(user_id)
                                if plan_data_response and plan_data_response.get("plan"):
                                    api_client.save_career_plan(user_id, plan_data_response.get("plan"))
                                    st.session_state.event_response = api_client.trigger_gamification_event(user_id, "CAREER_PLAN_GENERATED")
                                    st.session_state.generated_plan = plan_data_response.get("plan")
                                    st.session_state.chat_active = False
                                    st.cache_data.clear()
                                    st.rerun()
                with col2:
                    if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", use_container_width=True):
                        with st.spinner("–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞..."):
                            api_client.clear_chat_history(user_id)
                        st.session_state.chat_active = False
                        st.session_state.messages = []
                        st.rerun()

            if st.session_state.generated_plan:
                st.success("–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                st.balloons()
                plan = st.session_state.generated_plan
                st.subheader(plan.get('plan_title', '–í–∞—à –Ω–æ–≤—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø–ª–∞–Ω'))
                st.success(f"**–ê–Ω–∞–ª–∏–∑:** {plan.get('current_analysis', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.')}")
                path = plan.get('recommended_path', {})
                st.info(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {path.get('target_role', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}. **–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** {path.get('why_it_fits', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.')}")
                st.markdown("**–ù–∞–≤—ã–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:**")
                skill_gap = plan.get("skill_gap", [])
                if skill_gap:
                    for gap in skill_gap: st.markdown(f"- **`{gap.get('skill')}`** ‚Äî {gap.get('reason')}")
                st.markdown("**–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:**")
                action_steps = plan.get("actionable_steps", [])
                if action_steps:
                    for step in action_steps: st.markdown(f"**{step.get('step')}. ({step.get('type')}):** {step.get('description')} ({step.get('timeline')})")
                if st.button("–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ!"):
                    st.session_state.chat_active = False
                    st.session_state.generated_plan = None
                    st.cache_data.clear()
                    st.rerun()

    # =====================================================================================
    # --- –í–ö–õ–ê–î–ö–ê 3: –û–§–§–ï–†–´ ---
    # =====================================================================================
    with tab_offers:
        st.header("üì¨ –í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        user_id = st.session_state.user_info.get('user_id')
        offers = api_client.get_user_offers(user_id)
        if offers is None:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ñ—Ñ–µ—Ä—ã.")
        elif not offers:
            st.success("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
        else:
            for offer in offers:
                with st.container(border=True):
                    hr_profile = api_client.get_user_profile(offer['from_hr_id'])
                    hr_name = hr_profile.get('name') if hr_profile else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π HR"
                    st.subheader(offer['title'])
                    st.caption(f"–û—Ç: {hr_name}")
                    st.info(f"–°—Ç–∞—Ç—É—Å: {offer['status']}")
                    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"):
                        st.write(offer['description'])
                    if offer['status'] == "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ":
                        c1, c2 = st.columns(2)
                        with c1:
                            if st.button("üëç –ü—Ä–∏–Ω—è—Ç—å", key=f"accept_{offer['id']}", use_container_width=True):
                                api_client.update_offer_status(offer['id'], "–ü—Ä–∏–Ω—è—Ç–æ")
                                st.toast("–û—Ñ—Ñ–µ—Ä –ø—Ä–∏–Ω—è—Ç!")
                                st.rerun()
                        with c2:
                            if st.button("üëé –û—Ç–∫–ª–æ–Ω–∏—Ç—å", key=f"decline_{offer['id']}", use_container_width=True):
                                api_client.update_offer_status(offer['id'], "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                                st.toast("–û—Ñ—Ñ–µ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
                                st.rerun()

# =====================================================================================
# --- –°–¢–†–ê–ù–ò–¶–ê HR ---
# =====================================================================================
def show_hr_page():
    st.title(f"üìá –ü–∞–Ω–µ–ª—å HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, {st.session_state.user_info.get('name')}")
    st.caption("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–º–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –æ–ø—ã—Ç–∞ –∏ –Ω–∞–≤—ã–∫–æ–≤.")
    
    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
    if 'sending_offer_to' not in st.session_state: st.session_state.sending_offer_to = None
    if 'search_results' not in st.session_state: st.session_state.search_results = None
    if 'viewing_profile_id' not in st.session_state: st.session_state.viewing_profile_id = None

    if st.session_state.viewing_profile_id:
        @st.dialog("–ü—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", width="large")
        def show_profile_dialog():
            profile_id = st.session_state.viewing_profile_id
            
            @st.cache_data(ttl=10) 
            def get_all_profile_data(uid):
                profile = api_client.get_user_profile(uid)
                gamification = api_client.get_user_progress(uid)
                achievements = api_client.get_user_achievements_status(uid)
                return profile, gamification, achievements
            
            profile_data, gamification_data, achievements_data = get_all_profile_data(profile_id)
            
            if not profile_data:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            else:
                col1, col2 = st.columns([1, 4])
                with col1:
                    st.image(profile_data.get("photo_url", ""), use_column_width=True, caption=profile_data.get("nickname"))
                with col2:
                    st.header(profile_data.get("name"))
                    st.subheader(profile_data.get("position", "–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞"))
                    st.markdown(f"**–û–±–æ –º–Ω–µ:** *{profile_data.get('about') or '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.'}*")
                
                st.markdown("---")
                st.subheader("–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏")
                skills = profile_data.get("skills", [])
                if skills: st.info(" ".join([f"`{skill.upper()}`" for skill in skills]))
                else: st.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞.")
                
                st.markdown("---")
                st.subheader("–ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
                g_col1, g_g_col2 = st.columns(2)
                with g_col1:
                    st.metric("‚ú® –û—á–∫–∏ –æ–ø—ã—Ç–∞ (XP)", gamification_data.get('xp', 0))
                with g_g_col2:
                    st.metric("üöÄ –£—Ä–æ–≤–µ–Ω—å", f"Lvl {gamification_data.get('level', 1)}")
                all_ach = achievements_data.get('achievements', [])
                if all_ach:
                    cols = st.columns(len(all_ach))
                    for i, ach in enumerate(all_ach):
                        with cols[i]:
                            icon_url = f"http://localhost:8000/assets/icons/{ach['icon']}"
                            if not ach['unlocked']: icon_url += "?grayscale=true"
                            st.image(icon_url, width=64, caption=f"**{ach['name']}**" if ach['unlocked'] else ach['name'])
            
            if st.button("–ó–∞–∫—Ä—ã—Ç—å", use_container_width=True):
                st.session_state.viewing_profile_id = None
                st.rerun()

        show_profile_dialog()

    st.markdown("---")
    tab_search, tab_my_offers = st.tabs(["üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", "üìÑ –ú–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã"])

    with tab_search:
        st.header("üß† –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        
        if st.session_state.sending_offer_to:
            user_profile = api_client.get_user_profile(st.session_state.sending_offer_to)
            candidate_name = user_profile.get('name') if user_profile else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç"
            with st.container(border=True):
                st.subheader(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è: {candidate_name}")
                with st.form("offer_form"):
                    title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ / –ø—Ä–æ–µ–∫—Ç–∞")
                    description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞", height=200, placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Ä–æ–ª—å, –∑–∞–¥–∞—á–∏ –∏ —É—Å–ª–æ–≤–∏—è...")
                    c1, c2 = st.columns(2)
                    with c1:
                        if st.form_submit_button("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ñ—Ñ–µ—Ä", type="primary", use_container_width=True):
                            if title and description:
                                hr_id = st.session_state.user_info.get('user_id')
                                with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞..."):
                                    api_client.create_offer(from_hr_id=hr_id, to_user_id=st.session_state.sending_offer_to, title=title, description=description)
                                st.success(f"–û—Ñ—Ñ–µ—Ä –¥–ª—è {candidate_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                                st.session_state.sending_offer_to = None
                                st.rerun()
                            else:
                                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
                    with c2:
                        if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞", use_container_width=True):
                            st.session_state.sending_offer_to = None
                            st.rerun()

        with st.form("search_form"):
            search_prompt = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:", height=150, placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–ò—â—É –æ–ø—ã—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ Python —Å–æ –∑–Ω–∞–Ω–∏–µ–º –æ–±–ª–∞—á–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π...'")
            submitted = st.form_submit_button("–ù–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", type="primary", use_container_width=True)
            if submitted and search_prompt:
                with st.spinner("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤..."):
                    st.session_state.search_results = api_client.match_candidates(search_prompt)
        
        st.markdown("---")
        st.subheader("üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
        
        if st.session_state.search_results is not None:
            if not st.session_state.search_results:
                st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
            else:
                sorted_results = sorted(st.session_state.search_results, key=lambda x: x['score'], reverse=True)
                for result in sorted_results:
                    level = result.get('level', 1)
                    border_color = "#808080"
                    if level >= 5: border_color = "#DC143C"
                    elif level >= 4: border_color = "#2E8B57"
                    elif level >= 3: border_color = "#4169E1"
                    elif level >= 2: border_color = "#FFD700"
                    
                    st.markdown(f'<div style="border: 2px solid {border_color}; border-radius: 10px; padding: 15px; margin-bottom: 10px;">', unsafe_allow_html=True)
                    col1, col2 = st.columns([3, 1])
                    with col1:
                        st.subheader(f"{result.get('name')} (Lvl {level})")
                        st.caption(f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {result.get('position')}")
                    with col2:
                        match_percent = int(result.get('score', 0) * 100)
                        st.progress(match_percent, text=f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {match_percent}%")
                    c1, c2 = st.columns(2)
                    with c1:
                        if st.button("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", key=f"view_{result.get('user_id')}", use_container_width=True):
                            st.session_state.viewing_profile_id = result.get('user_id')
                            st.rerun()
                    with c2:
                        if st.button("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ñ—Ñ–µ—Ä", key=f"offer_{result.get('user_id')}", use_container_width=True, type="secondary"):
                            st.session_state.sending_offer_to = result.get('user_id')
                            st.rerun()
                    st.markdown('</div>', unsafe_allow_html=True)
        else:
            st.info("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
    
    with tab_my_offers:
        st.header("üìÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤")
        hr_id = st.session_state.user_info.get('user_id')
        sent_offers = api_client.get_hr_offers(hr_id)
        if sent_offers is None:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã.")
        elif not sent_offers:
            st.info("–í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞.")
        else:
            display_data = []
            for offer in sent_offers:
                user_profile = api_client.get_user_profile(offer['to_user_id'])
                user_name = user_profile.get('name') if user_profile else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
                display_data.append({ "candidate_name": user_name, "vacancy": offer['title'], "sent_at": offer.get('timestamp', '').strip('"'), "status": offer['status'] })
            st.data_editor(display_data, column_config={"candidate_name": "–ö–∞–Ω–¥–∏–¥–∞—Ç", "vacancy": "–í–∞–∫–∞–Ω—Å–∏—è", "sent_at": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "status": "–°—Ç–∞—Ç—É—Å"}, hide_index=True, use_container_width=True, disabled=True)
# =====================================================================================
# --- –°–¢–†–ê–ù–ò–¶–ê –ê–î–ú–ò–ù–ê ---
# =====================================================================================
def show_admin_page():
    st.title("üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    with st.expander("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", expanded=False):
        with st.form("create_user_form", clear_on_submit=False): # clear_on_submit=False, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å
            st.subheader("–î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            new_name = st.text_input("–§–ò–û")
            new_username = st.text_input("–õ–æ–≥–∏–Ω (username)")
            new_role = st.selectbox("–†–æ–ª—å", ["–†–∞–±–æ—Ç–Ω–∏–∫", "HR"], index=0)
            
            submitted = st.form_submit_button("‚úÖ –°–æ–∑–¥–∞—Ç—å –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å")

            if submitted:
                if all([new_name, new_role, new_username]):
                    with st.spinner(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_name}..."):
                        response = api_client.create_user(
                            name=new_name, 
                            role=new_role, 
                            username=new_username,
                            password=None
                        )
                        if response:
                            st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{response.get('name')}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                            st.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: **{response.get('generated_password')}**")
                            st.warning("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å —Å–µ–π—á–∞—Å. –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –æ–Ω –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.")
                else:
                    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –§–ò–û, –õ–æ–≥–∏–Ω –∏ –†–æ–ª—å.")
    st.markdown("---")
    st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    all_users = api_client.get_all_users()
    if not all_users:
        st.info("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        for user in all_users: user['delete'] = False
        edited_users_df = st.data_editor(all_users, column_config={"id": "ID", "name": "–§–ò–û", "role": "–†–æ–ª—å", "position": "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "delete": st.column_config.CheckboxColumn("–£–¥–∞–ª–∏—Ç—å?", help="–û—Ç–º–µ—Ç—å—Ç–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")}, hide_index=True, key="user_editor", use_container_width=True)
        if st.button("üóëÔ∏è –ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö", type="primary"):
            users_to_delete = [user for user in edited_users_df if user.get("delete")]
            if users_to_delete:
                progress_bar = st.progress(0, text="–ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ...")
                for i, user in enumerate(users_to_delete):
                    api_client.delete_user(user['id'])
                    st.toast(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['name']} —É–¥–∞–ª–µ–Ω.")
                    progress_bar.progress((i + 1) / len(users_to_delete), text=f"–£–¥–∞–ª–µ–Ω–æ {i+1} –∏–∑ {len(users_to_delete)}")
                st.rerun()
            else:
                st.info("–ù–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –æ—Ç–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

# =====================================================================================
# --- –ì–õ–ê–í–ù–´–ô –†–û–£–¢–ï–† –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
# =====================================================================================
if not st.session_state.logged_in:
    show_login_page()
else:
    st.sidebar.header(f"üë§ {st.session_state.user_info.get('name')}")
    st.sidebar.caption(f"–†–æ–ª—å: {st.session_state.user_info.get('role')}")
    if st.sidebar.button("–í—ã–π—Ç–∏", use_container_width=True):
        st.session_state.logged_in = False
        st.session_state.user_info = {}
        st.rerun()

    role = st.session_state.user_info.get("role")
    if role == "–†–∞–±–æ—Ç–Ω–∏–∫":
        show_employee_page()
    elif role == "HR":
        show_hr_page()
    elif role == "Admin":
        show_admin_page()
    else:
        st.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")